{"version":3,"sources":["components/menu-item/menu-item.jsx","sections.js","components/directory/directory.jsx","pages/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Meni","props","className","size","style","backgroundImage","urlImage","title","sections","imageUrl","id","linkUrl","Directory","state","section","Sections","this","map","sec","toUpperCase","React","Component","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAceA,G,iBAXF,SAACC,GACV,OACA,yBAAKC,UAAS,oBAAeD,EAAME,OACnC,yBAAKC,MAAO,CAACC,gBAAgB,OAAD,OAAQJ,EAAMK,SAAd,MAA2BJ,UAAU,eACjE,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SAASD,EAAMM,OAC9B,0BAAML,UAAU,YAAhB,gBCyBSM,EAlCE,CACf,CACED,MAAO,OACPE,SAAU,oCACVC,GAAI,EACJC,QAAS,aAEX,CACEJ,MAAO,UACPE,SAAU,uCACVC,GAAI,EACJC,QAAS,gBAEX,CACEJ,MAAO,WACPE,SAAU,wCACVC,GAAI,EACJC,QAAS,iBAEX,CACEJ,MAAO,SACPE,SAAU,sCACVN,KAAM,QACNO,GAAI,EACJC,QAAS,eAEX,CACEJ,MAAO,OACPE,SAAU,mCACVN,KAAM,QACNO,GAAI,EACJC,QAAS,cCTEC,E,kDAhBX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAM,CACPC,QAAQC,GAHE,E,qDAOd,OACI,yBAAKb,UAAU,kBAClBc,KAAKH,MAAMC,QAAQG,KAAI,SAACC,GACxB,OAAO,kBAAC,EAAD,CAAMf,KAAMe,EAAIf,KAAMI,MAAOW,EAAIX,MAAMY,cAAeb,SAAUY,EAAIT,mB,GAX5DW,IAAMC,WCMbC,EAPA,kBACb,yBAAKpB,UAAU,YACb,sDACD,kBAAC,EAAD,CAAWA,UAAU,qBCSXqB,G,6KARX,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,W,GAJUkB,IAAMC,YCMJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4048e1ec.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../menu-item/menu-item.scss'\r\n \r\nconst Meni =((props)=>{\r\n    return(\r\n    <div className={`menu-item ${props.size}`}>\r\n    <div style={{backgroundImage:`url(${props.urlImage})`}}className=\"background\"></div>\r\n    <div className='content'>\r\n      <div className='title'>{props.title}</div>\r\n      <span className='subtitle'>SHOP NOW</span>\r\n    </div>\r\n  </div>)\r\n})\r\n\r\nexport default Meni","const sections = [\n  {\n    title: 'hats',\n    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\n    id: 1,\n    linkUrl: 'shop/hats'\n  },\n  {\n    title: 'jackets',\n    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\n    id: 2,\n    linkUrl: 'shop/jackets'\n  },\n  {\n    title: 'sneakers',\n    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\n    id: 3,\n    linkUrl: 'shop/sneakers'\n  },\n  {\n    title: 'womens',\n    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\n    size: 'large',\n    id: 4,\n    linkUrl: 'shop/womens'\n  },\n  {\n    title: 'mens',\n    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\n    size: 'large',\n    id: 5,\n    linkUrl: 'shop/mens'\n  }\n];\nexport default sections","import React from 'react';\r\nimport '../directory/directory.scss'\r\nimport Menu from '../menu-item/menu-item'\r\nimport Sections from '../../sections'\r\n\r\nclass Directory extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            section:Sections\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"directory-menu\">\r\n        {this.state.section.map((sec)=>\r\n        {return <Menu size={sec.size} title={sec.title.toUpperCase()} urlImage={sec.imageUrl}/>}\r\n        )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Directory","import React from 'react';\r\nimport '../pages/homepage.scss'\r\nimport Directory from '../components/directory/directory';\r\nimport '../components/directory/directory.scss'\r\nconst HomePage = () => (\r\n    <div className='homepage'>\r\n      <h1>Welcome to my Homepage</h1>\r\n     <Directory className=\"directory-menu\"/>\r\n    </div>\r\n  );\r\n  \r\n  export default HomePage;","import React from 'react';\r\n\r\nimport HomePage from './pages/homepage.jsx';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <HomePage />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}